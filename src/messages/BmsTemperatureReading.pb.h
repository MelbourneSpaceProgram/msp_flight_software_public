/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.1 at Wed Sep 26 02:18:07 2018. */

#ifndef PB_BMSTEMPERATUREREADING_PB_H_INCLUDED
#define PB_BMSTEMPERATUREREADING_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _BmsTemperatureReading {
    double die_temperature;
    double battery_temperature;
    uint32_t jeita_region;
    uint64_t timestamp_ms;
/* @@protoc_insertion_point(struct:BmsTemperatureReading) */
} BmsTemperatureReading;

/* Default values for struct fields */
extern const double BmsTemperatureReading_die_temperature_default;
extern const double BmsTemperatureReading_battery_temperature_default;
extern const uint32_t BmsTemperatureReading_jeita_region_default;
extern const uint64_t BmsTemperatureReading_timestamp_ms_default;

/* Initializer values for message structs */
#define BmsTemperatureReading_init_default       {-9999, -9999, 9999u, 0ull}
#define BmsTemperatureReading_init_zero          {0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define BmsTemperatureReading_die_temperature_tag 1
#define BmsTemperatureReading_battery_temperature_tag 2
#define BmsTemperatureReading_jeita_region_tag   3
#define BmsTemperatureReading_timestamp_ms_tag   4

/* Struct field encoding specification for nanopb */
extern const pb_field_t BmsTemperatureReading_fields[5];

/* Maximum encoded size of messages (where known) */
#define BmsTemperatureReading_size               33

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define BMSTEMPERATUREREADING_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
